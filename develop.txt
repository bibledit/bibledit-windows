Building Bibledit for Windows through Visual Studio Community 2015.


There is a git repository on Windows 10 and there's one on on macOS. 
Keep both repositories in sync. 
This ensures that the data on both operating systems are in sync.
Visual Studio 2015 is used on Windows for building Bibledit for Windows.
On macOS there's a script that refreshes the source of the Bibledit library.


How to include the SQlite library.
1. Download the native 32 or 64 bits SQLite DLL from http://sqlite.org.
2. Extract the files sqlite3.dll and sqlite3.def and place them in the project’s source folder.
3. Open a “Developer Command Prompt for VS2015” and navigate to this source folder.
4. Create an import library using the following command line: LIB /DEF:sqlite3.def
5. Add the library (that is sqlite3.lib) to the Project Properties -> Configuration Properties -> Linker -> Additional Dependencies.
6. Download SQlite amalgamation with the same version number from http://sqlite.org.
7. Unzip the sqlite3.h header file and place it into the source directory.
You will need to include the sqlite3.dll in the same directory as your program, or in a System Folder.


Folder "server" contains the Bibledit library. It produces server.exe.
Folder "gui" contains the Bibledit interface. It produces bibledit.exe


To create a package, use Inno Setup.
It was installed from innosetup-5.5.9-unicode.exe.
To have a clean package, do this:
* Remove the entire C:\bibledit directory.
* Run the builder.
* Copy bibledit.exe into C:\bibledit.
* Run the package.iss script.


Free legal Windows virtual images for testing are available from https://dev.modern.ie/tools/vms/windows/


The server.exe needs the Visual C++ Redistributable Package for Visual Studio 2015. 
Inno Setup installs it.


A code signing certificate was purchased from https://www.startssl.com. 
The certificate is valid from 2017-01-21 till 2020-04-21. 
Two certificates were downloaded from StartSSL: 
- Intermediate.crt
- CommonName.crt
The signtool.exe needs a certificate.pfx format:
$ openssl pkcs12 -export -out CommonName.pfx -inkey codesign.key -in CommonName.crt -password pass:""
Copy the .pfx file to the Windows developer machine.


Embedded WebKit library.
Building from source:
* https://webkit.org/webkit-on-windows/
* https://webkit.org/building-webkit-on-windows/
Webkit for C# ready binaries:
* http://cefsharp.github.io/
* https://www.teamdev.com/dotnetbrowser
Steps to embed it:
* Start with a Windows Application in Visual Studio in C#.
* Download the binary "CefSharp51_x32.zip" and unpack all files into folder "CefSharp_x32".
* Add references to the project to the following files: 
  CefSharp.dll
  CefSharp.Core.dll
  CefSharp.WinForms.dll
* Copy all files also to the project's Debug (or Release) folder.
* Add this into the import section:
  using CefSharp;
  using CefSharp.WinForms;     
* Add this to the code section:
  public ChromiumWebBrowser browser;
  public void InitBrowser(){
    Cef.Initialize(new CefSettings());
    browser = new ChromiumWebBrowser ("www.google.com");
    this.Controls.Add(browser);
    browser.Dock = DockStyle.Fill;
  }
* Call InitBrowser() just after the call to InitializeComponent():
  InitBrowser();
* Windows needs the Visual C++ Redistributable Packages for Visual Studio 2013 for x86.


CefSharp eats all key press events. Handling keyboard events works through a global keyboard hook in Windows.

