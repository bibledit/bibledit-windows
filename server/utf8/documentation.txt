http://grigory.info/UTF8Strings.About.html

F8 Strings as a C++ library that provides ability to work natively with UTF8 strings in a very simple way.

All you get is UTF8::String class with many overloaded operators and serving functions. 
You can concatenate strings just with "+" operator, assign one to another, convert to and from integer, get substring, replace and so on. 
And all the time content of the string is native UTF8 sequence which you can access too.

The library does not need any third-party libraries. All algorithms are inlined. So the library is very light.

UTF8 Strings library is distributed under GNU General Public License. 
You can download and use the code freely even in commercial software but you must open your code too.

UTF8 Strings is a small library with intuitive API you can get everything from detailed example further. 
Also every function is documented in Doxygen format in .h files.

You also can get documentation in Doxygen HTML format here.

Example

try {
  // Initialization
  
  // Empty string creation:
  UTF8::String s1;
  
  // Creating from cont char *
  UTF8::String s2("String from const char");
  
  // Creating from UTF32 string
  UTF8::String s3((const uint32_t *) PointerToUTF32);
  
  // Creating from std::string
  UTF8::String s4(std::string("From std::string"));
  
  // Creating from another UTF8::String object
  UTF8::String s5(s1);
  
  // Creating from decimal or real number
  UTF8::String s6(3);
  UTF8::String s7(3.1415);
  
  // Loading file contents
  UTF8::String s8(UTF8::String::FromFile("/tmp/test.txt"));
  
  
  
  // Operations and overloaded operators
  
  // Concatenation
  s1 = s2 + s5 + s4;
  s2 = "123" + s1 + "321";
  s4 = std::string("test") + s6;
  
  // Assignment
  s6 = "Assignment";
  s6 = (char *) SimpleStringPointer;
  s1 = 10;
  s5 = 15.5;
  
  // Get first and third character with space between
  s1 = s2[0] + " " + s4[2];
  
  // Comparing
  if ((s1 == s2) && (s5 != s4)) {
    std::cout << "Wow!";
  }
  
  // std::cout usage
  std::cout << "s1 is: " << s1;
  std::cout << "s1 is: " + s1;
  
  // String length in character, not in bytes
  std::cout << "s6 length is " << s6.Length();
  
  // Clearing string
  s6.Empty();
  
  // If string is a character and you need to check if it is number
  UTF8::String ch("4");
  if (ch.CharacterIsOneOfThese("0123456789")) {
    std::cout << "ch is a number";
  } else {
    std::cout << "ch is not a number";
  }
  
  // Check if substring exists
  UTF8::String hw("Hello, world!");
  if (hw.HasThisString("Hello")) {
    std::cout << "Hello is here";
  } else {
    std::cout << "Hello is out there";
  }
  
  // Convert from a very big number
  UTF8::String bn;
  bn.ConvertFromInt64(1234567890);
  
  
  // Get substring
  UTF8::String ss = "Will cut text from here";
  
  std::cout << ss.Substring(0, 2) << std::endl; // Prints "Wi"
  std::cout << ss.Substring(3) << std::endl; // Prints " cut text from here"
  std::cout << ss.Substring(5, 2) << std::endl; // Prints "cu"
  
  // Replacing
  UTF8::String rep("Need to replace err3or");
  std::cout << rep.Replace("err3or", "error") << std::endl;
  
  // Trimming
  UTF8::String tr(" Need to filter_string_trim it      ");
  std::cout << tr.Trim() << std::endl;
  
  // Replace substring
  UTF8::String sr("one-five-three");
  std::cout << sr.SubstringReplace(4, 4, "two") << std::endl; // Prints one-two-three
  
  // Look for substring
  UTF8::String ssb("one-five-one");
  std::cout << "pos1 :" << ssb.GetSubstringPosition("one") << std::endl; // Prints 0
  std::cout << "pos2 :" << ssb.GetSubstringPosition("one", 3) << std::endl; // Prints 9
  
  // Explode and implode
  UTF8::String expl("one-+-two-+-three");
  std::vector <UTF8::String> parts = expl.Explode("-+-");
  for (int i = 0; i < parts.size(); i++) {
    std::cout << "part " << i << ": "<< parts[i] << std::endl; // Prints one two and three
  }
  
  std::cout << UTF8::String::Implode(parts,"-") << std::endl; // Prints one-two-three

} catch (UTF8::Exception e) {
  std::cout << "Catched: " << e.GetErrorString();
}
